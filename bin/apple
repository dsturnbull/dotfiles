#!/usr/bin/env ruby1.9
# -*- coding: utf-8 -*-

class String
  def blank?
    self == ''
  end
end

class NilClass
  def to_sym
    :help
  end
  
  def blank?
    true
  end
end

def help
  puts <<-EOH
usage: $0 cmd
  where cmd is one of:
    vol               -- get volume, - if muted
    wifi_info         -- connected wifi access point and signal strength (RSSI)
    battery_charging  -- - not charging, ~ charging
    battery_life      -- percentage
    battery_remaining -- %hh%mm remaining or .. if calculating
    bluetooth_network -- - or *
    ip_addr           -- x.x.x.x
  EOH
end

def vol
  # 0-100, nil = muted
  volume_settings = `osascript -e 'get volume settings'`.strip
  _, output, _, input, _, alert, _, muted = volume_settings.split(':').map { |e| e.split(',') }.flatten.map(&:strip)
  output = output.to_s
  muted = eval(muted)
  'Ω ' + (muted ? '-' : output)
end

def wifi_info
  # get airport data into hash
  data = `/System/Library/PrivateFrameworks/Apple80211.framework/Versions/A/Resources/airport -I`.strip.split("\n")
  info = {}
  data.each do |line|
    k, v = line.split(':')
    k.strip!
    v.strip!
    info[k] = v
  end

  # sanitise
  info['SSID'] = 'no wifi' if info['SSID'].blank?

  # normalise
  info['agrCtlRSSI'] = if info['agrCtlRSSI'].blank? || info['agrCtlRSSI'] == '0'
    '-'
  else
    (info['agrCtlRSSI'].to_f / 127 * 100).round
  end

  # output format
  "#{info['SSID']} Ψ #{info['agrCtlRSSI']}"
end

def _battery_info
  return @battery_info if @battery_info

  ioregs = `ioreg -r -n AppleSmartBattery -l | grep -e "MaxCapacity\\\|CurrentCapacity\\\|IsCharging\\\|TimeRemaining\\\|FullyCharged"`.split("\n")
  current_capacity, fully_charged, is_charging, time_remaining, max_capacity = ioregs.map { |l| l.sub(/.*= /, '') }

  fully_charged = fully_charged == 'Yes' || false
  current_capacity = current_capacity.to_f
  max_capacity = max_capacity.to_f
  perc = (current_capacity/max_capacity * 100).to_i rescue 100

  charging = is_charging == 'Yes' || false
  is_charging = charging ? '≈' : '-'

  if charging || time_remaining.to_i == 0
    time_remaining = '∞'
  else
    time_remaining = time_remaining.to_i
    time_remaining *= 60 if time_remaining < 10
    hours = time_remaining / 60
    mins  = time_remaining % 60
    time_remaining = "#{hours}h#{mins}m"
  end

  if perc == 100 && is_charging == '-' && time_remaining == '..'
    @battery_info = { perc: '~', is_charging: '≈', time_remaining: '~' }
  else
    @battery_info = { perc: perc, is_charging: is_charging, time_remaining: time_remaining }
  end
end

def battery_charging
  _battery_info[:is_charging]
end

def battery_life
  _battery_info[:perc]
end

def battery_remaining
  _battery_info[:time_remaining]
end

def bluetooth_network
  'ß -'
end

def ip_addr
  network = `route get default | grep gateway | awk '{print $2}' 2>/dev/null`.strip.sub(/\.[0-9]+$/, '')
  unless network.blank?
    ip = `ifconfig | grep #{network} | awk '{print $2}'`.strip
    ip.blank? ? '127.0.0.1' : ip
  else
    '127.0.0.1'
  end
end

puts self.send(ARGV[0].to_sym)

# vim:filetype=ruby
