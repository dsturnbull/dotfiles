#!/usr/bin/env python
import os, sys, mimetypes, base64, logging, socket, random, time

logging.basicConfig(
    level=logging.DEBUG,
    filename='/q/public/encoders/%s.log' % socket.gethostname(),
    filemode='a',
    format='%(asctime)s %(levelname)-8s %(message)s',
    datefmt='%a, %d %b %Y %H:%M:%S'
)

files = []
encoding = '/q/public/encoding'
done = '/q/public/done'
locations = ['/q/media/tv', '/q/media/movies']
locations = ['/q/media/tv/black.adder']
for location in locations:
    cmd = 'find %s -type f' % location
    for file in os.popen(cmd).readlines():
        file = file.strip()
        type = mimetypes.guess_type(file)[0]
        files.append((file, type))
        if not type or 'video/' not in type:
            logging.info('%s is %s, not encoding' % (file, type))

while True:
    file, type = files[random.randint(0, len(files) - 1)]
    hash = base64.b64encode(file)
    encoding_file = os.path.join(encoding, hash)
    done_file = os.path.join(done, hash)
    if os.path.exists(done_file) or os.path.exists(encoding_file):
        logging.debug('skipping %s' % file)
        continue

    logging.debug('encoding %s' % file)
    open(encoding_file, 'w').close()

    print file

    open(done_file, 'w').close()
    os.unlink(encoding_file)

    infile = file
    outfile = file.replace('/q/media/tv', '/q/media/ipod/tv').replace('/q/media/movies', '/q/media/ipod/movies')

    encode = "ffmpeg -i %s -acodec aac -ab 128k -s 640x480 -vcodec h264 -b 500k -flags +loop -cmp +chroma -partitions +parti4x4+partp8x8+partb8x8 -me umh -subq 5 -trellis 1 -refs 1 -coder 0 -me_range 16 -g 300 -keyint_min 25 -sc_threshold 40 -i_qfactor 0.71 -bt 500k -maxrate 10M -bufsize 10M -rc_eq 'blurCplx^(1-qComp)' -qcomp 0.6 -qmin 10 -qmax 51 -qdiff 4 -level 30 -aspect 4:3 -threads 10 %s" % (infile, outfile)
    atomise = "AtomicParsley %s --DeepScan --iPod-uuid 1200 --overWrite" % outfile

    print encode
    print atomise
    time.sleep(10)
